name: release-images

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms (comma-separated). Example: linux/arm64 or linux/arm64,linux/amd64'
        required: false
        default: 'linux/arm64'

permissions:
  contents: read
  packages: write

env:
  # Default platforms for tag builds; workflow_dispatch can override
  DEFAULT_PLATFORMS: linux/arm64

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU (for cross-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute metadata
        id: meta
        shell: bash
        run: |
          # Determine version from tag or fallback
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
          else
            TAG_NAME="dev-${GITHUB_SHA::7}"
          fi
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT

          # Decide platforms
          PLATFORMS_INPUT='${{ github.event.inputs.platforms }}'
          if [[ -n "${PLATFORMS_INPUT}" ]]; then
            PLATFORMS="${PLATFORMS_INPUT}"
          else
            PLATFORMS="${DEFAULT_PLATFORMS}"
          fi
          echo "platforms=${PLATFORMS}" >> $GITHUB_OUTPUT

          # Image names
          OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "owner=${OWNER_LOWER}" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          platforms: ${{ steps.meta.outputs.platforms }}
          push: true
          tags: |
            ghcr.io/${{ steps.meta.outputs.owner }}/scout-backend:${{ steps.meta.outputs.tag_name }}
            ghcr.io/${{ steps.meta.outputs.owner }}/scout-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          platforms: ${{ steps.meta.outputs.platforms }}
          push: true
          tags: |
            ghcr.io/${{ steps.meta.outputs.owner }}/scout-frontend:${{ steps.meta.outputs.tag_name }}
            ghcr.io/${{ steps.meta.outputs.owner }}/scout-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Ensure GHCR packages are public (org scope)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const pkgNames = ['scout-backend', 'scout-frontend'];
            for (const pkg of pkgNames) {
              try {
                await github.request('PUT /orgs/{org}/packages/container/{package_name}/visibility', {
                  org: owner,
                  package_name: pkg,
                  visibility: 'public',
                  headers: { 'X-GitHub-Api-Version': '2022-11-28' }
                });
                core.info(`Set org package ${pkg} visibility to public`);
              } catch (e) {
                core.warning(`Org-level visibility update failed for ${pkg}: ${e.message}`);
              }
            }

      - name: Ensure GHCR packages are public (user scope)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const pkgNames = ['scout-backend', 'scout-frontend'];
            for (const pkg of pkgNames) {
              try {
                await github.request('PUT /users/{username}/packages/container/{package_name}/visibility', {
                  username: owner,
                  package_name: pkg,
                  visibility: 'public',
                  headers: { 'X-GitHub-Api-Version': '2022-11-28' }
                });
                core.info(`Set user package ${pkg} visibility to public`);
              } catch (e) {
                core.warning(`User-level visibility update failed for ${pkg}: ${e.message}`);
              }
            }

      - name: Summary
        run: |
          echo "Published images:" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ steps.meta.outputs.owner }}/scout-backend:${{ steps.meta.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ steps.meta.outputs.owner }}/scout-backend:latest" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ steps.meta.outputs.owner }}/scout-frontend:${{ steps.meta.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- ghcr.io/${{ steps.meta.outputs.owner }}/scout-frontend:latest" >> $GITHUB_STEP_SUMMARY

  # Optional convenience job to print how to include amd64 later
  help:
    runs-on: ubuntu-latest
    steps:
      - name: How to build x86 later
        run: |
          echo "To include x86 (amd64) later, re-run this workflow via 'Run workflow' and set input platforms to: linux/arm64,linux/amd64" >> $GITHUB_STEP_SUMMARY


