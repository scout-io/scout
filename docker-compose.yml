# In your docker-compose.yml
services:
  backend:
    build: ./backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # so Docker SDK can talk to host Docker
    expose:
      - "8000"
    environment:
      # PROMETHEUS_MULTIPROC_DIR is now set in the Dockerfile.
      - REDIS_HOST=redis # Use service name as hostname
      - REDIS_PORT=6379
      - REDIS_CONTEXT_TTL=86400
    depends_on:
      - redis # Ensure Redis starts before the backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/docs" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    build: ./frontend
    container_name: react_container
    expose:
      - "3000"

  nginx:
    build: ./nginx
    container_name: nginx_proxy
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend

  # The exporter service is no longer needed.
  # Prometheus will scrape backends directly.

  redis:
    image: redis:alpine
    container_name: scout_redis
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: scout_prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      - backend
# - exporter # No longer needed.

volumes:
  prometheus_data: # Prometheus data persistence
